//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum DcaError {
    /// 6000 - Invalid deposit amount
    #[error("Invalid deposit amount")]
    InvalidAmount = 0x1770,
    /// 6001 - Invalid deposit amount
    #[error("Invalid deposit amount")]
    InvalidCycleAmount = 0x1771,
    /// 6002 - Invalid pair
    #[error("Invalid pair")]
    InvalidPair = 0x1772,
    /// 6003 - Too frequent DCA cycle
    #[error("Too frequent DCA cycle")]
    TooFrequent = 0x1773,
    /// 6004 - Minimum price constraint must be greater than 0
    #[error("Minimum price constraint must be greater than 0")]
    InvalidMinPrice = 0x1774,
    /// 6005 - Maximum price constraint must be greater than 0
    #[error("Maximum price constraint must be greater than 0")]
    InvalidMaxPrice = 0x1775,
    /// 6006 - In amount needs to be more than in amount per cycle
    #[error("In amount needs to be more than in amount per cycle")]
    InAmountInsufficient = 0x1776,
    /// 6007 - Wrong user
    #[error("Wrong user")]
    Unauthorized = 0x1777,
    /// 6008 - inAta not passed in
    #[error("inAta not passed in")]
    NoInATA = 0x1778,
    /// 6009 - userInAta not passed in
    #[error("userInAta not passed in")]
    NoUserInATA = 0x1779,
    /// 6010 - outAta not passed in
    #[error("outAta not passed in")]
    NoOutATA = 0x177A,
    /// 6011 - userOutAta not passed in
    #[error("userOutAta not passed in")]
    NoUserOutATA = 0x177B,
    /// 6012 - Trying to withdraw more than available
    #[error("Trying to withdraw more than available")]
    InsufficientBalanceInProgram = 0x177C,
    /// 6013 - Deposit should be more than 0
    #[error("Deposit should be more than 0")]
    InvalidDepositAmount = 0x177D,
    /// 6014 - User has insufficient balance
    #[error("User has insufficient balance")]
    UserInsufficientBalance = 0x177E,
    /// 6015 - Unauthorized Keeper
    #[error("Unauthorized Keeper")]
    UnauthorizedKeeper = 0x177F,
    /// 6016 - Unrecognized Program
    #[error("Unrecognized Program")]
    UnrecognizedProgram = 0x1780,
    /// 6017 - Calculation errors
    #[error("Calculation errors")]
    MathErrors = 0x1781,
    /// 6018 - Not time to fill
    #[error("Not time to fill")]
    KeeperNotTimeToFill = 0x1782,
    /// 6019 - Order amount wrong
    #[error("Order amount wrong")]
    OrderFillAmountWrong = 0x1783,
    /// 6020 - Out amount below expectations
    #[error("Out amount below expectations")]
    SwapOutAmountBelowMinimum = 0x1784,
    /// 6021 - Wrong admin
    #[error("Wrong admin")]
    WrongAdmin = 0x1785,
    /// 6022 - Overflow in arithmetic operation
    #[error("Overflow in arithmetic operation")]
    MathOverflow = 0x1786,
    /// 6023 - Address Mismatch
    #[error("Address Mismatch")]
    AddressMismatch = 0x1787,
    /// 6024 - Program Mismatch
    #[error("Program Mismatch")]
    ProgramMismatch = 0x1788,
    /// 6025 - Incorrect Repayment Amount
    #[error("Incorrect Repayment Amount")]
    IncorrectRepaymentAmount = 0x1789,
    /// 6026 - Cannot Borrow Before Repay
    #[error("Cannot Borrow Before Repay")]
    CannotBorrowBeforeRepay = 0x178A,
    /// 6027 - No Repayment Found
    #[error("No Repayment Found")]
    NoRepaymentInstructionFound = 0x178B,
    /// 6028 - Missing Swap Instruction
    #[error("Missing Swap Instruction")]
    MissingSwapInstructions = 0x178C,
    /// 6029 - Expected Instruction to use Jupiter Swap Program
    #[error("Expected Instruction to use Jupiter Swap Program")]
    UnexpectedSwapProgram = 0x178D,
    /// 6030 - Invalid Swap Mint
    #[error("Invalid Swap Mint")]
    InvalidSwapMint = 0x178E,
    /// 6031 - Unknown Instruction
    #[error("Unknown Instruction")]
    UnknownInstruction = 0x178F,
    /// 6032 - Missing Repay Instruction
    #[error("Missing Repay Instruction")]
    MissingRepayInstructions = 0x1790,
    /// 6033 - Keeper Shortchanged
    #[error("Keeper Shortchanged")]
    KeeperShortchanged = 0x1791,
    /// 6034 - Jup Swap to Wrong Out Account
    #[error("Jup Swap to Wrong Out Account")]
    WrongSwapOutAccount = 0x1792,
    /// 6035 - Transfer amount should be exactly account balance
    #[error("Transfer amount should be exactly account balance")]
    WrongTransferAmount = 0x1793,
    /// 6036 - Insufficient balance for rent
    #[error("Insufficient balance for rent")]
    InsufficientBalanceForRent = 0x1794,
    /// 6037 - Unexpected SOL amount in intermediate account
    #[error("Unexpected SOL amount in intermediate account")]
    UnexpectedSolBalance = 0x1795,
    /// 6038 - Too little WSOL to perform transfer
    #[error("Too little WSOL to perform transfer")]
    InsufficientWsolForTransfer = 0x1796,
    /// 6039 - Did not call initiate_flash_fill
    #[error("Did not call initiate_flash_fill")]
    MissedInstruction = 0x1797,
    /// 6040 - Did not call this program's initiate_flash_fill
    #[error("Did not call this program's initiate_flash_fill")]
    WrongProgram = 0x1798,
    /// 6041 - Can't close account with balance
    #[error("Can't close account with balance")]
    BalanceNotZero = 0x1799,
    /// 6042 - Should not have WSOL leftover in DCA out-token account
    #[error("Should not have WSOL leftover in DCA out-token account")]
    UnexpectedWSOLLeftover = 0x179A,
    /// 6043 - Should pass in a WSOL intermediate account when transferring SOL
    #[error("Should pass in a WSOL intermediate account when transferring SOL")]
    IntermediateAccountNotSet = 0x179B,
    /// 6044 - Did not call jup swap
    #[error("Did not call jup swap")]
    UnexpectedSwapInstruction = 0x179C,
    /// 6045 - Expect more from swap
    #[error("Expect more from swap")]
    SwapOutLessThanUserMinimum = 0x179D,
    /// 6046 - Expect less from swap
    #[error("Expect less from swap")]
    SwapOutMoreThanUserMaximum = 0x179E,
}

impl solana_program::program_error::PrintProgramError for DcaError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for DcaError {
    fn type_of() -> &'static str {
        "DcaError"
    }
}
