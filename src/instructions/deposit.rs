//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
pub struct Deposit {
      
              
          pub user: solana_program::pubkey::Pubkey,
          
              
          pub dca: solana_program::pubkey::Pubkey,
          
              
          pub in_ata: solana_program::pubkey::Pubkey,
          
              
          pub user_in_ata: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub event_authority: solana_program::pubkey::Pubkey,
          
              
          pub program: solana_program::pubkey::Pubkey,
      }

impl Deposit {
  pub fn instruction(&self, args: DepositInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DepositInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.user,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.dca,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.in_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_in_ata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = DepositInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::DCA_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositInstructionData {
            discriminator: [u8; 8],
            }

impl DepositInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [242, 35, 198, 137, 82, 225, 242, 182],
                                }
  }
}

impl Default for DepositInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositInstructionArgs {
                  pub deposit_in: u64,
      }


/// Instruction builder for `Deposit`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` dca
                ///   2. `[writable]` in_ata
                ///   3. `[writable]` user_in_ata
                ///   4. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug, Default)]
pub struct DepositBuilder {
            user: Option<solana_program::pubkey::Pubkey>,
                dca: Option<solana_program::pubkey::Pubkey>,
                in_ata: Option<solana_program::pubkey::Pubkey>,
                user_in_ata: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                event_authority: Option<solana_program::pubkey::Pubkey>,
                program: Option<solana_program::pubkey::Pubkey>,
                        deposit_in: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user = Some(user);
                    self
    }
            #[inline(always)]
    pub fn dca(&mut self, dca: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.dca = Some(dca);
                    self
    }
            #[inline(always)]
    pub fn in_ata(&mut self, in_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.in_ata = Some(in_ata);
                    self
    }
            #[inline(always)]
    pub fn user_in_ata(&mut self, user_in_ata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_in_ata = Some(user_in_ata);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn deposit_in(&mut self, deposit_in: u64) -> &mut Self {
        self.deposit_in = Some(deposit_in);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Deposit {
                              user: self.user.expect("user is not set"),
                                        dca: self.dca.expect("dca is not set"),
                                        in_ata: self.in_ata.expect("in_ata is not set"),
                                        user_in_ata: self.user_in_ata.expect("user_in_ata is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = DepositInstructionArgs {
                                                              deposit_in: self.deposit_in.clone().expect("deposit_in is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `deposit` CPI accounts.
  pub struct DepositCpiAccounts<'a, 'b> {
          
                    
              pub user: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub dca: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub in_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_in_ata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `deposit` CPI instruction.
pub struct DepositCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub user: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub dca: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub in_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_in_ata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DepositInstructionArgs,
  }

impl<'a, 'b> DepositCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: DepositCpiAccounts<'a, 'b>,
              args: DepositInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              user: accounts.user,
              dca: accounts.dca,
              in_ata: accounts.in_ata,
              user_in_ata: accounts.user_in_ata,
              token_program: accounts.token_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dca.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.in_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_in_ata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = DepositInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::DCA_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.user.clone());
                        account_infos.push(self.dca.clone());
                        account_infos.push(self.in_ata.clone());
                        account_infos.push(self.user_in_ata.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Deposit` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` user
                ///   1. `[writable]` dca
                ///   2. `[writable]` in_ata
                ///   3. `[writable]` user_in_ata
          ///   4. `[]` token_program
          ///   5. `[]` event_authority
          ///   6. `[]` program
#[derive(Clone, Debug)]
pub struct DepositCpiBuilder<'a, 'b> {
  instruction: Box<DepositCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DepositCpiBuilderInstruction {
      __program: program,
              user: None,
              dca: None,
              in_ata: None,
              user_in_ata: None,
              token_program: None,
              event_authority: None,
              program: None,
                                            deposit_in: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user = Some(user);
                    self
    }
      #[inline(always)]
    pub fn dca(&mut self, dca: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.dca = Some(dca);
                    self
    }
      #[inline(always)]
    pub fn in_ata(&mut self, in_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.in_ata = Some(in_ata);
                    self
    }
      #[inline(always)]
    pub fn user_in_ata(&mut self, user_in_ata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_in_ata = Some(user_in_ata);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn deposit_in(&mut self, deposit_in: u64) -> &mut Self {
        self.instruction.deposit_in = Some(deposit_in);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = DepositInstructionArgs {
                                                              deposit_in: self.instruction.deposit_in.clone().expect("deposit_in is not set"),
                                    };
        let instruction = DepositCpi {
        __program: self.instruction.__program,
                  
          user: self.instruction.user.expect("user is not set"),
                  
          dca: self.instruction.dca.expect("dca is not set"),
                  
          in_ata: self.instruction.in_ata.expect("in_ata is not set"),
                  
          user_in_ata: self.instruction.user_in_ata.expect("user_in_ata is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DepositCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                dca: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                in_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_in_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        deposit_in: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

